{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","c","console","log","type","value","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","res","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","Fragment","GifExpertApp","categories","elm","idx","ReactDOM","render","document","getElementById"],"mappings":"oNAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAsB9C,OACI,sBAAMC,SAdW,SAAAC,GAEjBA,EAAEC,iBAEEJ,EAAWK,SAEXP,GAAc,SAAAQ,GAAC,OAAKN,GAAL,mBAAoBM,OACnCL,EAAc,KAGlBM,QAAQC,IAAI,gBAIZ,SACI,uBACIC,KAAK,OACLC,MAAQV,EACRW,SAvBc,SAAAR,GAEtBF,EAAcE,EAAES,OAAOF,a,QCPlBG,EAAc,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAEjC,OACI,sBAAKC,UAAU,yCAAf,UACI,qBAAKC,IAAMF,EAAMG,IAAMJ,IACvB,4BAAKA,Q,uBCNJK,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,4DAEH,mCACVN,EAHa,gDAGmCO,UAAUF,GAH7C,6BAEH,oCAFG,SAKDG,MAAMR,GALL,cAKbS,EALa,gBAMIA,EAAIC,OANR,uBAMXC,EANW,EAMXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAQD,EAAIC,GACZhB,MAAQe,EAAIf,MACZC,IAAG,UAAKc,EAAIE,cAAT,aAAK,EAAYC,iBAAiBjB,QAZ1B,kBAgBZY,GAhBY,4CAAH,sDCGPM,EAAU,SAAC,GAAkB,IAAhBb,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EAEZrB,mBAAS,CAC/B2B,KAAM,GACNQ,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAoBtC,OAbAC,qBAAU,WAENlB,EAASC,GAAWkB,MAAK,SAAAT,GAErBO,EAAS,CACLV,KAAMG,EACNK,SAAS,SAIlB,CAAEd,IAGEe,EDjB2BI,CAAcnB,GAAlCW,EAFuB,EAE7BL,KAAcQ,EAFe,EAEfA,QAEtB,OACI,eAAC,IAAMM,SAAP,WAEI,oBAAIxB,UAAU,oCAAd,SACMI,IAIFc,GACA,mBAAGlB,UAAU,mCAAb,qBAGJ,qBAAKA,UAAU,YAAf,SAEQe,EAAOH,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAESA,GADCA,EAAIC,aEpBzBW,EAAe,WAAO,IAAD,EAEM1C,mBAAS,CAAC,SAFhB,mBAEvB2C,EAFuB,KAEX5C,EAFW,KAI9B,OACI,eAAC,IAAM0C,SAAP,WAEI,8CAEA,cAAC,EAAD,CAAa1C,cAAgBA,IAE7B,uBAGI4C,EAAWd,KAAI,SAACe,EAAKC,GAAN,OAEX,cAAC,EAAD,CAEIxB,SAAWuB,GADLA,UChB9BE,IAASC,OAER,cAAC,EAAD,IAEEC,SAASC,eAAe,W","file":"static/js/main.45e34470.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = e => {\n\n        setInputValue(e.target.value);\n    };\n\n    const handleSubmit = e => {\n        \n        e.preventDefault();\n\n        if (inputValue.trim()) \n        {\n            setCategories(c => [inputValue, ...c]);\n            setInputValue('');\n        }\n\n        console.log('Submit echo');\n    };\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <input\n                type=\"text\" \n                value={ inputValue }\n                onChange={ handleInputChange }\n            />\n        </form>\n    );\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n};","import React from 'react';\n\nexport const GifGridItem = ({ title, url }) => {\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={ url } alt={ title } />\n            <p>{ title }</p>\n        </div>\n    );\n}","\nexport const getGifs = async ( category ) => {\n\n    const api_key = 'Uv0CMXltiV8lnVOo8qWhz1Db4MG9El3b';\n    const url = `http://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=${ api_key }`;\n\n    const res = await fetch(url);\n    const { data } = await res.json();\n\n    const gifs = data.map(img => {\n        return {\n            id    : img.id,\n            title : img.title,\n            url   : img.images?.downsized_medium.url\n        };\n    });\n\n    return gifs;\n};","import React from 'react';\nimport { GifGridItem } from './GifGridItem';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\nexport const GifGrid = ({ category }) => {\n\n    const { data: images, loading } = useFetchGifs( category );\n\n    return (\n        <React.Fragment>\n            \n            <h3 className=\"animate__animated animate__fadeIn\">\n                { category }\n            </h3>\n            \n            { \n                loading && \n                <p className=\"animate__animated animate__flash\">Loading</p> \n            }\n\n            <div className=\"card-grid\">\n                {\n                    images.map(img => (\n                        <GifGridItem \n                            key={ img.id }\n                            { ...img } // img={ img }\n                        />\n                    ))\n                }\n            </div>\n\n        </React.Fragment>\n    );\n}","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n\n        getGifs( category ).then(img => {\n\n            setState({\n                data: img,\n                loading: false\n            });\n        });\n        \n    }, [ category ]);\n\n\n    return state;\n}","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['Goku']);\n\n    return (\n        <React.Fragment>\n            \n            <h2>GifExpertApp</h2>\n\n            <AddCategory setCategories={ setCategories } />\n            \n            <hr />\n\n            {\n                categories.map((elm, idx) => \n                \n                    <GifGrid \n                        key={ elm }\n                        category={ elm } \n                    />\n                )\n            }\n        </React.Fragment>\n    );\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { GifExpertApp } from './GifExpertApp';\n\nReactDOM.render(\n  \n\t<GifExpertApp />,\n\n  \tdocument.getElementById(\"root\")\n);\n"],"sourceRoot":""}